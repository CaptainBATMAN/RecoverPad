
import java.awt.*;
import java.awt.event.*;
// import java.time.LocalTime;
import java.io.*;
import java.util.Scanner;
import java.util.Date;

import javax.swing.text.AttributeSet;
import javax.swing.*;
import java.awt.print.*;

import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledDocument;

import java.lang.management.ClassLoadingMXBean;
import java.lang.runtime.*;

public class Notepad {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    JFrame frame;
    JMenuBar menuBar;
    JMenu file, edit, view, format, search, about;
    JMenuItem new1, open, save, exit, selectAll, cut, copy, paste, padcolor, textcolor, sav, print, font, find, replace,
            help, date, fullscreen, recover;
    JFileChooser fileChooser;
    JTextPane textArea;
    String fname = null;
    FontChooser fontDialog = null;
    FindDialog findReplaceDialog = null;
    String aboutText = "<html><big>Your Javapad</big><hr><hr>"
            + "<p align=right>Prepared by using Swings,Awt and Oops Concepts"
            + "<hr><p align=left>I Used jdk8 to compile the source code.<br><br>"
            + "<strong>Thanx 4 using Javapad</strong><br>"
            + "Ur Comments as well as bug reports r very welcome at<p align=center>"
            + "<hr><em><big>abc@gmail.com</big></em><hr><html>";
    FileOutputStream fos;
    File ff;

    Notepad() {
        /*
         * LocalTime time = LocalTime.now(); try { fos=new FileOutputStream("file"+time,
         * false); } catch(Exception e) { e.printStackTrace(); }
         */
        try {
            ff = new File("autoGeneratedFile.java");
            ff.setWritable(true, false); // ! Mohan
            ff.createNewFile();
        } catch (Exception e) {
            e.printStackTrace();
        }
        frame = new JFrame("JAVAPAD");

        file = new JMenu("File");
        edit = new JMenu("Edit");
        view = new JMenu("View");
        search = new JMenu("Search");
        about = new JMenu("Help");
        help = new JMenuItem("AboutEditor");
        replace = new JMenuItem("Replace");
        date = new JMenuItem("Date&Time");
        font = new JMenuItem("Font");
        find = new JMenuItem("Find");
        format = new JMenu("Format");
        new1 = new JMenuItem("New");
        open = new JMenuItem("Open");
        sav = new JMenuItem("Save");
        save = new JMenuItem("SaveAs");
        print = new JMenuItem("Print");
        exit = new JMenuItem("Close");
        selectAll = new JMenuItem("SelectAll");
        copy = new JMenuItem("Copy");
        cut = new JMenuItem("Cut");
        paste = new JMenuItem("Paste");
        padcolor = new JMenuItem("PadColor");
        textcolor = new JMenuItem("TextColor");
        fullscreen = new JMenuItem("FullScreen");
        recover = new JMenuItem("Recover");
        textArea = new JTextPane();
        fileChooser = new JFileChooser();
        menuBar = new JMenuBar();
        frame.setLayout(new BorderLayout());
        frame.add(textArea);
        file.add(new1);
        file.add(open);
        file.add(sav);
        file.add(save);
        file.add(print);
        file.add(exit);
        edit.add(copy);
        edit.add(cut);
        edit.add(paste);
        edit.add(selectAll);
        edit.add(date);
        view.add(fullscreen);
        view.add(recover);
        search.add(find);
        search.add(replace);
        format.add(padcolor);
        format.add(textcolor);
        format.add(font);
        about.add(help);
        menuBar.add(file);
        menuBar.add(edit);
        menuBar.add(view);
        menuBar.add(format);
        menuBar.add(search);
        menuBar.add(about);
        frame.setJMenuBar(menuBar);
        JScrollPane scroll = new JScrollPane(textArea, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
                JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        frame.add(scroll);
        arealistener ar = new arealistener();
        NewListener NL = new NewListener();
        new1.addActionListener(NL);
        OpenListener openL = new OpenListener();
        SaveListener saveL = new SaveListener();
        ExitListener exitL = new ExitListener();
        SelectListener seL = new SelectListener();
        CopyListener CL = new CopyListener();
        CutListener CUL = new CutListener();
        PasteListener pL = new PasteListener();
        FontListener FL = new FontListener();
        FindListener FND = new FindListener();
        ReplaceListener RL = new ReplaceListener();
        PadcolorListener padc = new PadcolorListener();
        TextcolorListener tc = new TextcolorListener();
        AboutListener Ab = new AboutListener();
        SavListener SL = new SavListener();
        DateListener DL = new DateListener();
        FullScreenListener FSL = new FullScreenListener();
        RecoverListener RCL = new RecoverListener();
        font.addActionListener(FL);
        sav.addActionListener(SL);
        find.addActionListener(FND);
        replace.addActionListener(RL);
        PrintListener PL = new PrintListener();
        print.addActionListener(PL);
        open.addActionListener(openL);
        save.addActionListener(saveL);
        exit.addActionListener(exitL);
        selectAll.addActionListener(seL);
        copy.addActionListener(CL);
        cut.addActionListener(CUL);
        paste.addActionListener(pL);
        padcolor.addActionListener(padc);
        textcolor.addActionListener(tc);
        help.addActionListener(Ab);
        date.addActionListener(DL);
        textArea.addKeyListener(ar);
        fullscreen.addActionListener(FSL);
        recover.addActionListener(RCL);

        // textArea.setLineWrap(true);

        frame.setSize(900, 600); // ! Mohan
        // frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        frame.setUndecorated(false);
        frame.setVisible(true);
        frame.addWindowListener(new WindowHandler());
    }

    class arealistener implements KeyListener {
        public void keyPressed(KeyEvent e) {

        }

        public void keyReleased(KeyEvent e) {
            try {
                PrintWriter writer = new PrintWriter(ff);
                String text = textArea.getText();
                writer.print("");
                if (text.charAt(text.length() - 1) == '{') {
                    textArea.setText(text + "}");
                }
                if (text.charAt(text.length() - 1) == '(') {
                    textArea.setText(text + ")");
                }
                writer.print(text);
                writer.close();
            } catch (Exception ex) {
                ex.printStackTrace();
            }

        }

        public void keyTyped(KeyEvent e) {
            try {
                PrintWriter writer = new PrintWriter(ff);
                // String text = textArea.getText();
                writer.print("");
                // add color for keywwords in text
                String text = textArea.getText();

                writer.print(text);
                String[] words = text.split(" ");
                // for each word make a different color for keywords
                StyleContext blue = StyleContext.getDefaultStyleContext();
                AttributeSet aset = blue.addAttribute(blue.getEmptySet(), StyleConstants.Foreground, Color.MAGENTA);
                AttributeSet aset2 = blue.addAttribute(blue.getEmptySet(), StyleConstants.Foreground, Color.BLACK);
                for (int i = 0; i < words.length; i++) {

                    // use styled document to add color to keywords
                    if (words[i].equals("for")) {
                        textArea.getStyledDocument().setCharacterAttributes(textArea.getText().indexOf(words[i]),
                                words[i].length(), aset, true);
                    } else if (words[i].equals("if")) {
                        textArea.getStyledDocument().setCharacterAttributes(textArea.getText().indexOf(words[i]),
                                words[i].length(), aset, true);

                    } else if (words[i].equals("\nSystem.out.println") || words[i].equals("\tSystem.out.println")
                            || words[i].equals("System.out.println") || words[i].equals("System.out.print")
                            || words[i].equals("System.out.println(")) {
                        textArea.getStyledDocument().setCharacterAttributes(textArea.getText().indexOf(words[i]),
                                words[i].length(), aset, true);
                    } else if (words[i].equals("class")) {
                        textArea.getStyledDocument().setCharacterAttributes(textArea.getText().indexOf(words[i]),
                                words[i].length(), aset, true);
                    } else if (words[i].equals("while")) {
                        textArea.getStyledDocument().setCharacterAttributes(textArea.getText().indexOf(words[i]),
                                words[i].length(), aset, true);
                    } else if (words[i].equals("do")) {
                        textArea.getStyledDocument().setCharacterAttributes(textArea.getText().indexOf(words[i]),
                                words[i].length(), aset, true);
                    } else if (words[i].equals("switch")) {
                        textArea.getStyledDocument().setCharacterAttributes(textArea.getText().indexOf(words[i]),
                                words[i].length(), aset, true);
                    } else if (words[i].equals("case")) {
                        textArea.getStyledDocument().setCharacterAttributes(textArea.getText().indexOf(words[i]),
                                words[i].length(), aset, true);
                    } else if (words[i].equals("default")) {
                        textArea.getStyledDocument().setCharacterAttributes(textArea.getText().indexOf(words[i]),
                                words[i].length(), aset, true);
                    } else if (words[i].equals("break")) {
                        textArea.getStyledDocument().setCharacterAttributes(textArea.getText().indexOf(words[i]),
                                words[i].length(), aset, true);
                    } else if (words[i].equals("continue")) {
                        textArea.getStyledDocument().setCharacterAttributes(textArea.getText().indexOf(words[i]),
                                words[i].length(), aset, true);
                    } else if (words[i].equals("return")) {
                        textArea.getStyledDocument().setCharacterAttributes(textArea.getText().indexOf(words[i]),
                                words[i].length(), aset, true);
                    } else if (words[i].equals("int")) {
                        textArea.getStyledDocument().setCharacterAttributes(textArea.getText().indexOf(words[i]),
                                words[i].length(), aset, true);
                    } else if (words[i].equals("float")) {
                        textArea.getStyledDocument().setCharacterAttributes(textArea.getText().indexOf(words[i]),
                                words[i].length(), aset, true);
                    } else if (words[i].equals("double")) {
                        textArea.getStyledDocument().setCharacterAttributes(textArea.getText().indexOf(words[i]),
                                words[i].length(), aset, true);
                    } else if (words[i].equals("char")) {
                        textArea.getStyledDocument().setCharacterAttributes(textArea.getText().indexOf(words[i]),
                                words[i].length(), aset, true);
                    } else if (words[i].equals("boolean")) {
                        textArea.getStyledDocument().setCharacterAttributes(textArea.getText().indexOf(words[i]),
                                words[i].length(), aset, true);
                    } else if (words[i].equals("String")) {
                        textArea.getStyledDocument().setCharacterAttributes(textArea.getText().indexOf(words[i]),
                                words[i].length(), aset, true);
                    } else if (words[i].equals("void")) {
                        textArea.getStyledDocument().setCharacterAttributes(textArea.getText().indexOf(words[i]),
                                words[i].length(), aset, true);
                    } else if (words[i].equals("final")) {
                        textArea.getStyledDocument().setCharacterAttributes(textArea.getText().indexOf(words[i]),
                                words[i].length(), aset, true);
                    } else if (words[i].equals("public")) {
                        textArea.getStyledDocument().setCharacterAttributes(textArea.getText().indexOf(words[i]),
                                words[i].length(), aset, true);
                    } else if (words[i].equals("private")) {
                        textArea.getStyledDocument().setCharacterAttributes(textArea.getText().indexOf(words[i]),
                                words[i].length(), aset, true);
                    } else if (words[i].equals("protected")) {
                        textArea.getStyledDocument().setCharacterAttributes(textArea.getText().indexOf(words[i]),
                                words[i].length(), aset, true);
                    } else if (words[i].equals("static")) {
                        textArea.getStyledDocument().setCharacterAttributes(textArea.getText().indexOf(words[i]),
                                words[i].length(), aset, true);
                    } else {
                        textArea.getStyledDocument().setCharacterAttributes(textArea.getText().indexOf(words[i]),
                                words[i].length(), aset2, true);
                    }
                }
                Process p = Runtime.getRuntime().exec("cmd /c ls");

                writer.close();
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }

    class AboutListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            JOptionPane.showMessageDialog(null, aboutText, "Dedicated 2 u!", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    class DateListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            JOptionPane.showMessageDialog(null, new Date().toString());
        }
    }

    class NewListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            if (fname == null && "".equals(textArea.getText())) {
                fname = null;
                frame.setTitle("Untitled");
                textArea.setText("");
            } else if (fname == null && !"".equals(textArea.getText())) {
                saveAs();
                fname = null;
                frame.setTitle("Untitled");
                textArea.setText("");
            } else if (fname != null) {
                save();
                JOptionPane.showMessageDialog(null, "File Automatically Saved");
                fname = null;
                frame.setTitle("Untitled");
                textArea.setText("");
            }
        }

    }

    class OpenListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            if (fname == null && "".equals(textArea.getText()))
                open();
            else if (fname == null && !"".equals(textArea.getText())) {
                int s = confirm();
                if (s == 1) {
                    saveAs();
                    JOptionPane.showMessageDialog(null, "FileSaved");
                    open();
                } else {
                    JOptionPane.showMessageDialog(null, "FileSaved");
                    open();
                }
            } else if (fname != null) {
                save();
                JOptionPane.showMessageDialog(null, "File Automatically Saved");
                open();
            }

        }
    }

    class FindListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            if (Notepad.this.textArea.getText().length() == 0)
                return;
            if (findReplaceDialog == null) {
                // findReplaceDialog = new FindDialog(Notepad.this.textArea);
            }
            findReplaceDialog.showDialog(Notepad.this.frame, true);
        }
    }

    class ReplaceListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            if (Notepad.this.textArea.getText().length() == 0)
                return;
            if (findReplaceDialog == null) {
                // findReplaceDialog = new FindDialog(Notepad.this.textArea);
            }
            findReplaceDialog.showDialog(Notepad.this.frame, false);
        }
    }

    class SavListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            if (fname == null)
                saveAs();
            if (fname != null)
                save();
        }
    }

    class SaveListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            saveAs();
        }
    }

    class FullScreenListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            try {
                fullScreen();
            } catch (Exception Er) {
            }
        }
    }

    class RecoverListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            try {
                recover();
            } catch (Exception rerr) {
            }
        }
    }

    class PrintListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            try {
                textArea.print();
            } catch (PrinterException pe) {
            }
        }
    }

    class FontListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            if (fontDialog == null)
                fontDialog = new FontChooser(textArea.getFont());
            if (fontDialog.showDialog(Notepad.this.frame, "Choose a font"))
                Notepad.this.textArea.setFont(fontDialog.createFont());
        }
    }

    class ExitListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            ExitWindow();
        }
    }

    class SelectListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            textArea.selectAll();
        }
    }

    class CopyListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            textArea.copy();
        }
    }

    class CutListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            textArea.cut();
        }
    }

    class PasteListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            textArea.paste();
        }
    }

    class PadcolorListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            Color c = JColorChooser.showDialog(textArea, "ColorChooser", null);
            textArea.setBackground(c);
        }
    }

    class TextcolorListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            Color c = JColorChooser.showDialog(textArea, "ColorChooser", null);
            textArea.setForeground(c);
        }
    }

    void saveAs() {
        if (JFileChooser.APPROVE_OPTION == fileChooser.showSaveDialog(frame)) {
            File file = fileChooser.getSelectedFile();
            fname = file.getPath();
            frame.setTitle(fname);
            PrintWriter out = null;
            try {
                out = new PrintWriter(file);
                String output = textArea.getText();
                out.println(output);
            } catch (Exception ex) {
                ex.printStackTrace();
            } finally {
                try {
                    out.flush();
                } catch (Exception ex1) {
                }
                try {
                    out.close();
                } catch (Exception ex1) {
                }
            }
        }
    }

    void save() {
        if (fname != null) {
            PrintWriter out = null;
            try {
                out = new PrintWriter(fname);
                String output = textArea.getText();
                out.println(output);
            } catch (Exception ex) {
                ex.printStackTrace();
            } finally {
                try {
                    out.flush();
                } catch (Exception ex1) {
                }
                try {
                    out.close();
                } catch (Exception ex1) {
                }
            }

        }
    }

    void open() {
        if (JFileChooser.APPROVE_OPTION == fileChooser.showOpenDialog(frame)) {
            File file = fileChooser.getSelectedFile();
            fname = file.getPath();
            frame.setTitle(fname);
            textArea.setText("");
            Scanner in = null;
            try {
                in = new Scanner(file);
                while (in.hasNext()) {
                    String line = in.nextLine();
                    // textArea.append(line + "\n");
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            } finally {
                in.close();
            }
        }
    }

    int confirm() {
        int selectedOption = JOptionPane.showConfirmDialog(null, "Do you wanna save this file?", "Select Option",
                JOptionPane.YES_NO_OPTION);
        if (selectedOption == JOptionPane.YES_OPTION)
            return 1;
        else
            return 0;
    }

    void ExitWindow() {
        if (fname == null && "".equals(textArea.getText()))
            System.exit(0);
        else if (fname == null && !"".equals(textArea.getText())) {
            int k = confirm();
            if (k == 1) {
                saveAs();
                JOptionPane.showMessageDialog(null, "File Saved");
                System.exit(0);
            } else {
                JOptionPane.showMessageDialog(null, "File Not Saved");
                System.exit(0);
            }
        } else if (fname != null) {
            System.out.println(fname);
            save();
            JOptionPane.showMessageDialog(null, "File Automatically Saved");
            System.exit(0);
        }
    }

    void fullScreen() {
        try {
            this.frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
            // this.frame.setUndecorated(true);
            // this.frame.setVisible(true);
        } catch (NullPointerException e) {
            System.out.println(e);
        }
    }

    void recover() {
        try {
            File file = new File("autoGeneratedFile.java");
            FileInputStream fis = new FileInputStream(file);
            byte[] data = new byte[(int) file.length()];
            fis.read(data);
            fis.close();
            String str = new String(data, "UTF-8");
            textArea.setText(str);
        } catch (Exception rerrc) {
            System.out.println(rerrc);
        }
    }

    class WindowHandler extends WindowAdapter {
        public void windowClosing(WindowEvent e) {
            int selectedOption = JOptionPane.showConfirmDialog(null, "Do you want to exit?", "Select Option",
                    JOptionPane.YES_NO_OPTION);
            if (selectedOption == JOptionPane.YES_OPTION) {
                ExitWindow();
            } else {
                frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
            }
        }
    }

    public static void main(String args[]) {
        new Notepad(); // ! Mohan
    }
}
